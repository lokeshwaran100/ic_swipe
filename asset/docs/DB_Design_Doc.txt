Overview
This document outlines the simplified database schema for IcSwipe — a gamified token discovery and trading platform built on the ICP blockchain. The MVP uses a minimal relational structure with two main tables: users and portfolio.

Database Engine
PostgreSQL (via Supabase)

Schema Summary

1. users
Stores information about each user including their unique identifier (from Internet Identity) and default trading preferences.

Table: users

Column	Type	Constraints	Description
user_id	TEXT	PRIMARY KEY	Unique ID (e.g., from Internet Identity)
gmail	TEXT	UNIQUE, NOT NULL	User’s Gmail for login
default_swap_amount	FLOAT	NOT NULL	Default ICP amount used for each swap

2. portfolio
Tracks the tokens held by each user. Includes basic token identifiers and trade information.

Table: portfolio

Column	Type	Constraints	Description
portfolio_id	SERIAL	PRIMARY KEY	Auto-incremented portfolio record ID
user_id	TEXT	REFERENCES users(user_id)	Owner of the token (linked to users table)
token_symbol	TEXT	NOT NULL	Ticker symbol of the token (e.g., ICP)
token_name	TEXT		Full name of the token (e.g., Internet Computer)
token_address	TEXT	NOT NULL	Contract address of the token on ICP
quantity	FLOAT	NOT NULL	Number of tokens the user owns
avg_buy_price	FLOAT		Average buy price per token
last_updated	TIMESTAMP	DEFAULT CURRENT_TIMESTAMP	Last time this entry was updated

Design Considerations

-> portfolio.user_id is a foreign key referencing users.user_id to link each record to a specific user.

-> token_address is required to support on-chain interaction and future expansion to dynamic pricing and contract validation.

-> RLS (Row-Level Security) is currently disabled for rapid MVP iteration, but should be enabled before production deployment.

Sample Query: Fetch User Portfolio
```
SELECT
p.token_symbol,
p.token_name,
p.quantity,
p.avg_buy_price
FROM portfolio p
JOIN users u ON p.user_id = u.user_id
WHERE u.user_id = 'user-abc123';
```

Future Enhancements (Post-MVP)

1. Add transactions table for tracking individual swaps/trades
2. Add tokens master table for centralized token metadata
3. Add watchlist or "Not Interested" table
4. Enable RLS with auth.uid() = user_id policy
5. Add timestamps for creation/update to users
6. Let me know if you'd like the above converted to Markdown, Notion-style table, ER diagram, or Supabase Studio compatible JSON!